# import libraries
import numpy as np
from sklearn import datasets
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVC
from sklearn.svm import SVC

# Soft Margin Classification
iris = datasets.load_iris()
X = iris["data"][:, (2,3)] # petal length, petal width
y = (iris["target"] ==2).astype(np.float64)

svm_clf = Pipeline((
        ("scaler", StandardScaler()),
        ("linear_svc", LinearSVC(C=1, loss="hinge")),
    ))
    
svm_clf.fit(X, y)

svm_clf.predict([[5.5, 1.7]])

# Nonlinear SVM classification
from sklearn.datasets import make_moons
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures

moons = make_moons(150)
X_moons = moons[0]
y_moons = moons[1]

polynomial_svm_clf = Pipeline((
        ("poly_features", PolynomialFeatures(degree=3)),
        ("scaler", StandardScaler()),
        ("svm_clf", LinearSVC(C=10, loss="hinge"))
    ))

polynomial_svm_clf.fit(X_moons, y_moons)
polynomial_svm_clf.predict([[0.1071, 0.0498]])
polynomial_svm_clf.predict([[-0.169, 0.9856]])

# Polynomial Kernel
poly_kernel_svm_clf = Pipeline((
        ("scaler", StandardScaler()),
        ("svm_clf", SVC(kernel="poly", degree=3, coef0=1, C=5))
    ))
poly_kernel_svm_clf.fit(X_moons, y_moons)
poly_kernel_svm_clf.predict([[0.1071, 0.0498]])
poly_kernel_svm_clf.predict([[-0.169, 0.9856]])

# Gaussian RBF Kernel
rbf_kernel_svm_clf = Pipeline((
        ("scaler", StandardScaler()),
        ("svm_clf", SVC(kernel = "rbf", gamma=5, C=0.001))
    ))

rbf_kernel_svm_clf.fit(X_moons, y_moons)


