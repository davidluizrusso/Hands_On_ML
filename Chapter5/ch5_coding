# import libraries
import numpy as np
from sklearn import datasets
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVC
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix

# Soft Margin Classification
iris = datasets.load_iris()
X = iris["data"][:, (2,3)] # petal length, petal width
y = (iris["target"] ==2).astype(np.float64)

svm_clf = Pipeline((
        ("scaler", StandardScaler()),
        ("linear_svc", LinearSVC(C=1, loss="hinge")),
    ))
    
svm_clf.fit(X, y)

svm_clf.predict([[5.5, 1.7]])

# Nonlinear SVM classification
from sklearn.datasets import make_moons
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures

moons = make_moons(150)
X_moons = moons[0]
y_moons = moons[1]


# linear svm, linear features
linear_svm_clf = Pipeline((
        ("scaler", StandardScaler()),
        ("svm_clf", LinearSVC(C=10, loss="hinge"))
    ))
    
linear_svm_clf.fit(X_moons, y_moons)

linear_svm_pred = linear_svm_clf.predict(X_moons)

linear_svm_c_matrix = confusion_matrix(linear_svm_pred, y_moons)

# polynomial features, linear svm
polynomial_svm_clf = Pipeline((
        ("poly_features", PolynomialFeatures(degree=3)),
        ("scaler", StandardScaler()),
        ("svm_clf", LinearSVC(C=10, loss="hinge"))
    ))

polynomial_svm_clf.fit(X_moons, y_moons)
polynomial_svm_clf.predict([[0.1071, 0.0498]])
polynomial_svm_clf.predict([[-0.169, 0.9856]])

poly_feat_pred = poly_kernel_svm_clf.predict(X_moons)

poly_feat_c_matrix = confusion_matrix(poly_feat_pred, y_moons)

# Polynomial Kernel
poly_kernel_svm_clf = Pipeline((
        ("scaler", StandardScaler()),
        ("svm_clf", SVC(kernel="poly", degree=3, coef0=1, C=5))
    ))
poly_kernel_svm_clf.fit(X_moons, y_moons)
poly_kernel_svm_clf.predict([[0.1071, 0.0498]])
poly_kernel_svm_clf.predict([[-0.169, 0.9856]])

poly_preds = poly_kernel_svm_clf.predict(X_moons)

poly_c_matrix = confusion_matrix(poly_preds, y_moons)

# Gaussian RBF Kernel
rbf_kernel_svm_clf = Pipeline((
        ("scaler", StandardScaler()),
        ("svm_clf", SVC(kernel = "rbf", gamma=5, C=0.001))
    ))

rbf_kernel_svm_clf.fit(X_moons, y_moons)

rbf_preds = rbf_kernel_svm_clf.predict(X_moons)

poly_c_matrix = confusion_matrix(rbf_preds, y_moons)


# SVM Regression
from sklearn.svm import LinearSVR
from sklearn.datasets import load_boston
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from scipy import stats
import pandas as pd

boston = load_boston()
boston_X = boston['data']
boston_Y = boston['target']

X_train, X_test, y_train, y_test = train_test_split(boston_X, boston_Y,
                                                    test_size=0.33,
                                                    random_state=42)

svm_reg = LinearSVR(epsilon=1.5)
svm_reg.fit(X_train, y_train)

boston_train_preds = svm_reg.predict(X_train)

boston_train_error = mean_squared_error(boston_train_preds, y_train)

boston_test_preds = svm_reg.predict(X_test)
boston_test_error = mean_squared_error(boston_test_preds, y_test)

# polynomial regression
from sklearn.svm import SVR

svm_poly_reg = SVR(kernel = "poly", degree = 2, C = 100, epsilon = 0.1)
svm_poly_reg.fit(X_train, y_train)

boston_poly

